{
    "problem_id": "32",
    "problem_name": "Multiparticle_dynamics_in_the_optical_tweezer_array",
    "problem_description_main": "A system of $N$ identical nanospheres is trapped by an optical tweezer array that is arranged equidistantly along the $x$ axis. Each nanosphere is confined to oscillate near its equilibrium position due to the harmonic trapping forces from the linearly polarized optical tweezer array. The adjacent nanospheres interact via optical binding forces resulting from induced dipoles. The dynamics of phonon occupation are simulated for small oscillations along the $x$-axis near the equilibrium positions of each sphere, with the central difference method used for computing the derivatives in the simulation.",
    "problem_background_main": "In an optical tweezer array, trapped nanospheres experience optical binding forces due to interactions between their induced dipoles and external fields. These forces, combined with damping and vibrational couplings, govern the dynamics of phonon occupation. This problem explores these dynamics by modeling the system as coupled harmonic oscillators.",
    "problem_io": "def solve_multiparticle_dynamics(n0: list[float], P: list[float], phi: float, R: float, l: float, w: float, a: float, n: float, h: float, N: int, rho: float, t0: float, steps: int, gamma: np.ndarray) -> list[float]:\n    \"\"\"\n    Simulates phonon occupation dynamics in an optical tweezer array.\n\n    Args:\n        n0 (list[float]): Initial phonon occupation numbers.\n        P (list[float]): Powers of optical tweezers (Watts).\n        phi (float): Polarization angle (radians).\n        R (float): Distance between adjacent nanospheres (meters).\n        l (float): Wavelength of optical tweezers (meters).\n        w (float): Beam waist of optical tweezers (meters).\n        a (float): Radius of nanospheres (meters).\n        n (float): Refractive index of the nanospheres.\n        h (float): Step size for numerical derivative (meters).\n        N (int): Number of nanospheres.\n        rho (float): Density of nanospheres (kg/m\u00b3).\n        t0 (float): Time for simulation (seconds).\n        steps (int): Number of RK4 time steps.\n        gamma (np.ndarray): Damping coefficients for each nanosphere (rad/s).\n\n    Returns:\n        list[float]: Phonon occupation numbers at time t0.\n    \"\"\"",
    "required_dependencies": "import numpy as np\nfrom scipy.constants import epsilon_0, c, hbar\nfrom typing import List",
    "sub_steps": [
        {
            "step_number": "32.1",
            "step_name": "Calculate Optical Binding Force",
            "step_description_prompt": "Two linearly polarized optical traps having the same polarization direction are separated by a distance $R$. Implement a Python function to compute the optical binding force between the two identical nanospheres trapped by a linearly polarized optical tweezer array. The function should calculate the induced dipole interactions between the two nanospheres, assuming the Rayleigh approximation.",
            "step_background": "If we suppose the nanospheres are placed on the $x$-axis while each nanosphere is trapped by a linearly polarized laser beam propagating along the $z$-axis, we have the induced dipole moments as $\\mathbf{p}_1 = \\alpha \\mathbf{E}_1$ and $\\mathbf{p}_2 = \\alpha \\mathbf{E}_2$, where $\\alpha = 4\\pi \\varepsilon_0 a^3 \\frac{n^2 - 1}{n^2 + 2}$ is the scalar polarizability of the nanospheres. The trapping electric field $E_i$ is related to the laser power $P_i$ by:\n\n$$\nE_i = \\sqrt{\\frac{4P_i}{\\pi w^2 \\varepsilon_0 c}},\n$$\n\nwhere $E_i$ is the amplitude of the electric field at the location of the $i$-th nanosphere, $P_i$ is the power of the optical tweezers trapping the $i$-th nanosphere, $w$ is the beam waist of the optical tweezers (the radial size of the laser beam at the focal point), $\\varepsilon_0$ is the permittivity of free space, and $c$ is the speed of light in vacuum.\n\nThe electric field emitted by dipole 2 at the location of dipole 1 can be written as:\n\n$$\n\\mathbf{E}_{\\mathrm{ind},2}(\\mathbf{r}_1) = \\mathbf{G}(\\mathbf{R}) \\cdot \\mathbf{p}_2,\n$$\n\nwhere $\\mathbf{G}(\\mathbf{R})$ is the dyadic Green's function. The dyadic Green\u2019s function represents the relationship between the source field generated by a dipole and the resultant field at a different spatial point, incorporating both near-field and far-field effects. Its derivation involves solving Maxwell\u2019s equations for a dipole source in free space. Specifically,  $G_{pq}$  accounts for the propagation of the electromagnetic field emitted by dipole 2 to the position of dipole 1 and is expressed as:\n\n$$\nG_{pq} = \\frac{\\exp(ikR)}{4\\pi \\varepsilon_0 R^3} \\left[ \\left(3 - 3ikR - k^2R^2\\right) \\frac{R_p R_q}{R^2} + \\left(k^2R^2 + ikR - 1\\right) \\delta_{pq} \\right].\n$$\n\nHere, $R = |\\mathbf{R}|$ is the distance between the two dipoles, $\\mathbf{R} = \\mathbf{r}_1 - \\mathbf{r}_2$ is the vector pointing from dipole 2 to dipole 1, $k = 2\\pi / \\lambda$ is the wavevector corresponding to the wavelength $\\lambda$ of the optical tweezers, and $\\delta_{pq}$ is the Kronecker delta.\n\nThe derivation of $\\mathbf{G}(\\mathbf{R})$ begins with solving the Helmholtz equation for the Green\u2019s function $G(\\mathbf{r}, \\mathbf{r}')$, which satisfies:\n\n$$\n\\nabla \\times \\nabla \\times \\mathbf{G}(\\mathbf{R}) - k^2 \\mathbf{G}(\\mathbf{R}) = \\delta(\\mathbf{R}) \\mathbf{I},\n$$\n\nwhere $\\mathbf{I}$ is the identity tensor. Using spherical wave expansions and far-field approximations, the above equation yields the expression for $\\mathbf{G}(\\mathbf{R})$ presented earlier. The term $\\frac{\\exp(ikR)}{R^3}$ captures the spatial dependence of the field in the Rayleigh approximation, with $R^3$ arising from the near-field interaction, while $\\exp(ikR)$ accounts for phase effects in the radiative and reactive fields. The two main components inside the brackets correspond to the longitudinal and transverse field contributions, influenced by the symmetry of the dipole interaction.\n\nThe optical binding force along the $x$-axis is derived as:\n\n$$\nF_x = \\frac{1}{2} \\operatorname{Re} \\left[ \\mathbf{p}_1 \\cdot \\nabla_x (\\mathbf{E}_{\\mathrm{ind},2}(\\mathbf{r}_1)) \\right].\n$$\n\nThe derived radial optical binding force $F_x$ can be expressed as:\n\n$$\nF_x = F_{xx} + F_{xy},\n$$\n\nwhere:\n$$\nF_{xx} = \\frac{2 \\alpha^2 E_{x1} E_{x2}}{8\\pi \\varepsilon_0 R^4} \\left[ -3 \\cos(kR) - 3kR \\sin(kR) + (kR)^2 \\cos(kR) \\right],\n$$\n\n$$\nF_{xy} = \\frac{\\alpha^2 E_{y1} E_{y2}}{8\\pi \\varepsilon_0 R^4} \\left[ 3 \\cos(kR) + 3kR \\sin(kR) - 2(kR)^2 \\cos(kR) - (kR)^3 \\sin(kR) \\right].\n$$\n\nThe Rayleigh approximation assumes that each nanosphere acts as an induced dipole in the external field. The optical binding force arises from the interaction between the dipole induced in one nanosphere and the electric field generated by the induced dipole of the other nanosphere. This force depends on factors such as polarization, inter-sphere distance $R$, and beam parameters.",
            "ground_truth_code": "def calculate_binding_force(P: list[float], phi: float, R: float, l: float, w: float, a: float, n: float) -> float:\n    \"\"\"\n    Function to calculate the optical binding force between two trapped nanospheres.\n\n    Args:\n        P (list of float): Laser powers for the two nanospheres (Watts).\n        phi (float): Polarization angle of the tweezers (radians).\n        R (float): Distance between adjacent nanospheres (meters).\n        l (float): Wavelength of the optical tweezers (meters).\n        w (float): Beam waist of the optical tweezers (meters).\n        a (float): Radius of the nanospheres (meters).\n        n (float): Refractive index of the nanospheres.\n\n    Returns:\n        float: Optical binding force (Pico-Newtons).\n    \"\"\"\n    k = 2 * np.pi / l  # Wave number\n    alpha = (4 * np.pi * epsilon_0 * a**3 * (n**2 - 1)) / (n**2 + 2)  # Polarizability\n    E1 = np.sqrt(4 * P[0] / (np.pi * w**2 * epsilon_0 * c))  # Electric field for sphere 1\n    E2 = np.sqrt(4 * P[1] / (np.pi * w**2 * epsilon_0 * c))  # Electric field for sphere 2\n\n    Fxx = (\n        2 * alpha**2 * E1 * E2 * np.cos(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n        * (-3 * np.cos(k * R) - 3 * k * R * np.sin(k * R) + (k * R)**2 * np.cos(k * R))\n    )\n    Fxy = (\n        alpha**2 * E1 * E2 * np.sin(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n        * (3 * np.cos(k * R) + 3 * k * R * np.sin(k * R) - 2 * (k * R)**2 * np.cos(k * R) - (k * R)**3 * np.sin(k * R))\n    )\n    return (Fxx + Fxy) * 1e12  # Convert to pico-Newtons",
            "function_header": "def calculate_binding_force(P: list[float], phi: float, R: float, l: float, w: float, a: float, n: float) -> float:\n    \"\"\"\n    Function to calculate the optical binding force between two trapped nanospheres.\n\n    Args:\n        P (list of float): Laser powers for the two nanospheres (Watts).\n        phi (float): Polarization angle of the tweezers (radians).\n        R (float): Distance between adjacent nanospheres (meters).\n        l (float): Wavelength of the optical tweezers (meters).\n        w (float): Beam waist of the optical tweezers (meters).\n        a (float): Radius of the nanospheres (meters).\n        n (float): Refractive index of the nanospheres.\n\n    Returns:\n        float: Optical binding force (Pico-Newtons).\n    \"\"\"",
            "test_cases": [
                "# 32.1 # Test case 1\nP = [50, 50]\nphi = 0\nR = 1550e-9\nl = 1550e-9\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = 3.305455280955525\nresult = calculate_binding_force(P, phi, R, l, w, a, n)\nassert np.allclose(result, target, rtol=1e-4, atol=1e-8), f\"Result {result} does not match target {target}\"",
                "# Test case 2\nP = [50, 50]\nphi = np.pi/2\nR = 1550e-9\nl = 1550e-9\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = -3.441376278823615\nresult = calculate_binding_force(P, phi, R, l, w, a, n)\nassert np.allclose(result, target, rtol=1e-4, atol=1e-8), f\"Result {result} does not match target {target}\"",
                "# Test case 3\nP = [50, 50]\nphi = np.pi/4\nR = 1550e-9\nl = 1550e-9\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = -0.06796049893404463\nresult = calculate_binding_force(P, phi, R, l, w, a, n)\nassert np.allclose(result, target, rtol=1e-4, atol=1e-8), f\"Result {result} does not match target {target}\""
            ]
        },
        {
            "step_number": "32.2",
            "step_name": "Generate Hamiltonian",
            "step_description_prompt": "Develop a Python function to compute the Hamiltonian for the provided nanospherical system, considering the damping coefficient array and the linearized optical binding force acting upon the trapped nanospheres.\n\nThe Hamiltonian for the system is given by:\n\n$$H = \\sum_i \\hbar \\Omega_i b_i^{\\dagger} b_i + \\hbar \\sum_{i \\neq j} g_{i j} \\left( b_i^{\\dagger} b_j + b_i b_j^{\\dagger} \\right),$$\n\nwhere $b_i$ and $b_i^{\\dagger}$ are the annihilation and creation operators, respectively. These operators allow the Hamiltonian to be expressed in the quantized form in the basis of their outer products. The resonant frequencies $\\Omega_i$ of the nanospheres are modified to include the effects of damping, and the coupling constants $g_{i j}$ are derived from the linearized optical binding forces.\n\nThis function will account for:\n\n- The damping coefficients $\\Gamma_i$, which modify the resonant frequencies.\n- The pairwise optical binding forces $k_{i j}$, which determine the coupling constants $g_{i j}$.\n- The contribution of the local optical tweezer forces $k_i$, which define the intrinsic stiffness for each nanosphere.\n\nThe resulting Hamiltonian matrix will reflect the quantized dynamics of the system, incorporating resonant frequencies, coupling constants, and damping corrections.",
            "step_background": "Around the equilibrium position, the optical binding force between nanospheres is linearized as:\n\n$$\n\\Delta F_{ij} = \\left. \\Delta R \\frac{dF_x}{dR} \\right|_{x = |i - j|d} \\equiv k_{ij} \\Delta R,\n$$\n\nwhere:\n- $ \\Delta F_{ij} $: Perturbation in the optical binding force between the $ i $-th and $ j $-th nanospheres,  \n- $ \\Delta R $: Displacement from the equilibrium position,  \n- $ d $: Distance between adjacent nanospheres in the array.\n\nThe dynamics of the $ i $-th nanosphere, including damping effects, are governed by the linearized equation:\n\n$$\nm \\ddot{x}_i + \\Gamma_i \\dot{x}_i + k_i x_i + \\sum_{j \\ne i} k_{ij} (x_i - x_j) = 0,\n$$\n\nwhere:\n- $ m $: Mass of the nanosphere,  \n- $ \\Gamma_i $: Damping coefficient for the $ i $-th nanosphere, which models dissipative effects such as Stokes drag or active damping,  \n- $ k_i $: Stiffness of the optical trap confining the $ i $-th nanosphere,  \n- $ k_{ij} $: Pairwise interaction stiffness between the $ i $-th and $ j $-th nanospheres.\n\nThe term $ \\Gamma_i $ explicitly incorporates dissipative processes, ensuring that both conservative optical trapping forces and energy dissipation are modeled. Damping modifies the system's resonant frequencies by introducing energy dissipation into the effective spring constant.\n\nThe corresponding classical Hamiltonian for the system is:\n\n$$\nH = \\sum_i \\left( \\frac{p_i^2}{2m} + \\frac{1}{2} k_i x_i^2 \\right) + \\sum_{i \\ne j} \\frac{1}{2} k_{ij} (x_i - x_j)^2.\n$$\n\nThis includes the kinetic energy $ \\frac{p_i^2}{2m} $, the potential energy from the optical trap $ \\frac{1}{2} k_i x_i^2 $, and the interaction energy between nanospheres $ \\frac{1}{2} k_{ij} (x_i - x_j)^2 $.\n\nTo quantize the Hamiltonian, the classical position $ x_i $ and momentum $ p_i $ operators are replaced with their quantum counterparts. Using ladder operators $ b_i $ and $ b_i^\\dagger $, the position and momentum operators are expressed as:\n\n$$\nx_i = \\sqrt{\\frac{\\hbar}{2 m \\Omega_i}} \\left(b_i + b_i^\\dagger \\right), \\quad p_i = i \\sqrt{\\frac{\\hbar m \\Omega_i}{2}} \\left(b_i^\\dagger - b_i \\right).\n$$\n\nSubstituting these into the classical Hamiltonian, the terms simplify to yield the quantized Hamiltonian:\n\n$$\nH = \\sum_i \\hbar \\Omega_i \\left(b_i^\\dagger b_i + \\frac{1}{2} \\right) + \\hbar \\sum_{i \\neq j} g_{ij} \\left(b_i^\\dagger b_j + b_i b_j^\\dagger\\right).\n$$\n\nThe resonant frequency $ \\Omega_i $, modified to include damping and interaction effects, is given by:\n\n$$\n\\Omega_i = \\sqrt{\\frac{k_i + \\sum_{j \\neq i} k_{ij}}{m}} - i \\frac{\\Gamma_i}{2}.\n$$\n\nHere:\n- The real part $ \\sqrt{\\frac{k_i + \\sum_{j \\neq i} k_{ij}}{m}} $ governs the oscillatory dynamics,  \n- The imaginary part $ -i \\frac{\\Gamma_i}{2} $ introduces energy dissipation due to damping.\n\nThe coupling constant $ g_{ij} $, derived from the pairwise interaction term, is:\n\n$$\ng_{ij} = -\\frac{k_{ij}}{2 m \\sqrt{\\text{Re}(\\Omega_i) \\cdot \\text{Re}(\\Omega_j)}}.\n$$\n\nNeglecting the constant zero-point energy term, the quantized Hamiltonian becomes:\n\n$$\nH = \\sum_i \\hbar \\Omega_i b_i^\\dagger b_i + \\hbar \\sum_{i \\neq j} g_{ij} \\left(b_i^\\dagger b_j + b_i b_j^\\dagger\\right),\n$$\n\nwhere:\n- The diagonal elements $ H_{ii} = \\hbar \\Omega_i $ reflect the damped resonant frequencies,  \n- The off-diagonal elements $ H_{ij} = \\hbar g_{ij} $ capture the coupling between nanospheres.\n\nThis Hamiltonian incorporates the effects of damping through the imaginary part of $ \\Omega_i $, coupling between nanospheres via $ g_{ij} $, and the stiffness of both optical traps and pairwise interactions.",
            "ground_truth_code": "def generate_hamiltonian(k_ij: np.ndarray, P: list[float], w: float, a: float,\n                         n: float, N: int, rho: float, gamma: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Generate the Hamiltonian matrix for N nanospheres in an optical tweezer array.\n\n    Args:\n        k_ij (np.ndarray): Pairwise binding forces (pN/m)\n        P (list[float]): List of laser powers for each nanosphere (Watts)\n        w (float): Beam waist of optical tweezers (meters)\n        a (float): Radius of nanospheres (meters)\n        n (float): Refractive index of nanospheres\n        N (int): Number of nanospheres\n        rho (float): Density of nanospheres (kg/m\u00b3)\n        gamma (np.ndarray): Damping coefficients for each nanosphere (rad/s)\n\n    Returns:\n        np.ndarray: NxN Hamiltonian matrix\n    \"\"\"\n    k_ij = k_ij/1e12 # Convert to Newtons/m\n    m = (4 / 3) * np.pi * (a**3) * rho\n    alpha = 4 * np.pi * epsilon_0 * a**3 * ((n**2 - 1) / (n**2 + 2))\n    k_i = np.array([(alpha * p) / (np.pi * (w**4) * epsilon_0 * c) for p in P])\n    Omega_real = np.zeros(N, dtype=np.float64)\n    Omega_imag = np.zeros(N, dtype=np.float64)\n    g_ij = np.zeros((N, N), dtype=np.float64)\n    # Compute resonant frequencies (real and imaginary parts)\n    for i in range(N):\n        Omega_real[i] = np.sqrt((k_i[i] + np.sum(k_ij[i])) / m)\n        Omega_imag[i] = -gamma[i] / 2\n    # Compute coupling constants\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                g_ij[i, j] = -k_ij[i, j] / (2 * m * np.sqrt(Omega_real[i] * Omega_real[j]))\n    # Construct the Hamiltonian matrix\n    H = np.zeros((N, N), dtype=np.complex128)\n    for i in range(N):\n        H[i, i] = hbar * (Omega_real[i] + 1j * Omega_imag[i]) # Diagonal terms\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                H[i, j] = hbar * g_ij[i, j] # Off-diagonal terms\n    return H",
            "function_header": "def generate_hamiltonian(k_ij: np.ndarray, P: list[float], w: float, a: float,\n                         n: float, N: int, rho: float, gamma: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Generate the Hamiltonian matrix for N nanospheres in an optical tweezer array.\n\n    Args:\n        k_ij (np.ndarray): Pairwise binding forces (pN/m)\n        P (list[float]): List of laser powers for each nanosphere (Watts)\n        w (float): Beam waist of optical tweezers (meters)\n        a (float): Radius of nanospheres (meters)\n        n (float): Refractive index of nanospheres\n        N (int): Number of nanospheres\n        rho (float): Density of nanospheres (kg/m\u00b3)\n        gamma (np.ndarray): Damping coefficients for each nanosphere (rad/s)\n\n    Returns:\n        np.ndarray: NxN Hamiltonian matrix\n    \"\"\"",
            "test_cases": [
                "# Test Case 1: Uniform Damping\nP = [0.01, 0.01, 0.01, 0.01, 0.01]\nw = 4e-7\na = 60e-9\nn = 1.55\nN = len(P)\nrho = 2.5e3\ngamma = np.array([200] * N)\n\n# Pairwise binding forces (pN)\nk_ij = np.array([\n    [0.00000000e+00, 3.15406976e-06, 1.57233072e-06, 1.04763939e-06, 7.85576988e-07],\n    [3.15406976e-06, 0.00000000e+00, 3.15406976e-06, 1.57233072e-06, 1.04763939e-06],\n    [1.57233072e-06, 3.15406976e-06, 0.00000000e+00, 3.15406976e-06, 1.57233072e-06],\n    [1.04763939e-06, 1.57233072e-06, 3.15406976e-06, 0.00000000e+00, 3.15406976e-06],\n    [7.85576988e-07, 1.04763939e-06, 1.57233072e-06, 3.15406976e-06, 0.00000000e+00]\n]\n)\n\noutput = generate_hamiltonian(k_ij, P, w, a, n, N, rho, gamma)\ntarget = [\n    [4.19771533e-29 - 4.66223097e-15j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -4.60061311e-41 + 0.00000000e+00j],\n    [-1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-15j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j],\n    [-9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-15j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j],\n    [-6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-15j, -1.84713337e-40 + 0.00000000e+00j],\n    [-4.60061311e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-15j]\n]\n\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Result {output} does not match target {target}\"",
                "# Test Case 2: High Damping\ngamma = np.array([2000000] * N)\nk_ij = np.array([\n    [0.00000000e+00, 3.15406976e-06, 1.57233072e-06, 1.04763939e-06, 7.85576988e-07],\n    [3.15406976e-06, 0.00000000e+00, 3.15406976e-06, 1.57233072e-06, 1.04763939e-06],\n    [1.57233072e-06, 3.15406976e-06, 0.00000000e+00, 3.15406976e-06, 1.57233072e-06],\n    [1.04763939e-06, 1.57233072e-06, 3.15406976e-06, 0.00000000e+00, 3.15406976e-06],\n    [7.85576988e-07, 1.04763939e-06, 1.57233072e-06, 3.15406976e-06, 0.00000000e+00]\n])\noutput = generate_hamiltonian(k_ij, P, w, a, n, N, rho, gamma)\ntarget = [\n    [4.19771533e-29 - 4.66223097e-11j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -4.60061311e-41 + 0.00000000e+00j],\n    [-1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-11j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j],\n    [-9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-11j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j],\n    [-6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-11j, -1.84713337e-40 + 0.00000000e+00j],\n    [-4.60061311e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-11j]\n]\n\n\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Result {output} does not match target {target}\"",
                "# Test Case 2: Increased Damping\ngamma = np.array([2000000] * N)\nk_ij = np.array([\n    [0.00000000e+00, 3.15406976e-06, 1.57233072e-06, 1.04763939e-06, 7.85576988e-07],\n    [3.15406976e-06, 0.00000000e+00, 3.15406976e-06, 1.57233072e-06, 1.04763939e-06],\n    [1.57233072e-06, 3.15406976e-06, 0.00000000e+00, 3.15406976e-06, 1.57233072e-06],\n    [1.04763939e-06, 1.57233072e-06, 3.15406976e-06, 0.00000000e+00, 3.15406976e-06],\n    [7.85576988e-07, 1.04763939e-06, 1.57233072e-06, 3.15406976e-06, 0.00000000e+00]\n])\noutput = generate_hamiltonian(k_ij, P, w, a, n, N, rho, gamma)\ntarget = [\n    [4.19771533e-29 - 4.66223097e-11j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -4.60061311e-41 + 0.00000000e+00j],\n    [-1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-11j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j],\n    [-9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-11j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j],\n    [-6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-11j, -1.84713337e-40 + 0.00000000e+00j],\n    [-4.60061311e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-11j]\n]\n\n\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Result {output} does not match target {target}\"",
                "# Test Case 4: Zero Damping\nk_ij = np.array([\n    [0.00000000e+00, 3.15406976e-06, 1.57233072e-06, 1.04763939e-06, 7.85576988e-07],\n    [3.15406976e-06, 0.00000000e+00, 3.15406976e-06, 1.57233072e-06, 1.04763939e-06],\n    [1.57233072e-06, 3.15406976e-06, 0.00000000e+00, 3.15406976e-06, 1.57233072e-06],\n    [1.04763939e-06, 1.57233072e-06, 3.15406976e-06, 0.00000000e+00, 3.15406976e-06],\n    [7.85576988e-07, 1.04763939e-06, 1.57233072e-06, 3.15406976e-06, 0.00000000e+00]\n])\n\ngamma = np.zeros(N)\noutput = generate_hamiltonian(k_ij, P, w, a, n, N, rho, gamma)\ntarget = [\n    [1.17047881e-27 + 0.j, 6.42456055e-47 + 0.j, 2.14152018e-47 + 0.j, 8.56608073e-48 + 0.j, 4.28304036e-48 + 0.j],\n    [6.42456055e-47 + 0.j, 1.17047881e-27 + 0.j, 6.42456055e-47 + 0.j, 2.14152018e-47 + 0.j, 8.56608073e-48 + 0.j],\n    [2.14152018e-47 + 0.j, 6.42456055e-47 + 0.j, 1.17047881e-27 + 0.j, 6.42456055e-47 + 0.j, 2.14152018e-47 + 0.j],\n    [8.56608073e-48 + 0.j, 2.14152018e-47 + 0.j, 6.42456055e-47 + 0.j, 1.17047881e-27 + 0.j, 6.42456055e-47 + 0.j],\n    [4.28304036e-48 + 0.j, 8.56608073e-48 + 0.j, 2.14152018e-47 + 0.j, 6.42456055e-47 + 0.j, 1.17047881e-27 + 0.j]\n]\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Result {output} does not match target {target}\"",
                "# Test Case 5: Non-Uniform Damping\ngamma = np.array([1.88e9, 2.5e9, 1.5e9, 3.0e9, 2.0e9])\noutput = generate_hamiltonian(k_ij, P, w, a, n, N, rho, gamma)\ntarget = [\n    [4.19771533e-29 - 4.38249711e-08j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -4.60061311e-41 + 0.00000000e+00j],\n    [-1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 5.82778871e-08j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j],\n    [-9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 3.49667323e-08j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j],\n    [-6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 6.99334645e-08j, -1.84713337e-40 + 0.00000000e+00j],\n    [-4.60061311e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-08j]\n]\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Result {output} does not match target {target}\""
            ]
        },
        {
            "step_number": "32.3",
            "step_name": "Runge-Kutta for Phonon Dynamics",
            "step_description_prompt": "Write a Python function to implement the fourth-order Runge-Kutta (RK4) method to simulate phonon occupation dynamics of the trapped nanosphere system. The dynamics are governed by the Lindblad master equation for the correlation matrix $C_{ij} = \\langle b_i^\\dagger b_j \\rangle$, where the Hamiltonian $H$ is represented in the basis of the outer products of the ladder operators $b_i^\\dagger b_j$, and includes a factor of $\\hbar$ (i.e., $H = \\hbar \\tilde{H}$). The Lindblad master equation is expressed as:\n\n$$\\dot{C} = \\frac{i}{\\hbar}[H, C] + \\{L, C\\} + M.$$\n\nHere, $H$ describes the coherent dynamics, $L$ represents dissipation, and $M$ accounts for thermal effects. The RK4 method should be used to numerically solve this equation.",
            "step_background": "The Lindblad master equation governs the evolution of the correlation matrix $C_{ij} = \\langle b_i^\\dagger b_j \\rangle$, which describes the dynamics of an open quantum system. The correlation matrix $C$ is derived from the density matrix $\\rho$ by relating the expectation of the operators $b_i^\\dagger b_j$ as $\\langle b_i^\\dagger b_j \\rangle = \\operatorname{tr}(\\rho b_i^\\dagger b_j)$. For the Lindblad equation, the Hamiltonian $H$ is expressed in the basis of the outer products of the ladder operators $b_i^\\dagger b_j$, and it is scaled by $\\hbar$ (i.e., $H = \\hbar \\tilde{H}$). The Lindblad master equation is given by:\n\n$$\\dot{C} = \\frac{i}{\\hbar}[H, C] + \\{L, C\\} + M,$$\n\nwhere:\n\n- $H$ is the system Hamiltonian, which determines coherent dynamics,\n- $L = -\\frac{1}{2} \\operatorname{Diag}(\\Gamma_1, \\Gamma_2, \\ldots, \\Gamma_N)$ is the dissipation matrix describing loss rates, and\n- $M = \\operatorname{Diag}(\\Gamma_1 n_1^{\\text{th}}, \\Gamma_2 n_2^{\\text{th}}, \\ldots, \\Gamma_N n_N^{\\text{th}})$ is the reservoir matrix describing thermal effects.\n\nThe standard Fourth-Order Runge-Kutta (RK4) method is used to numerically solve this equation. At each time step $n$, the next state $C_{n+1}$ is computed as:\n\n$$C_{n+1} = C_n + \\frac{\\Delta t}{6}(k_1 + 2k_2 + 2k_3 + k_4),$$\n\nwhere:\n\n$$k_1 = \\frac{i}{\\hbar}[H, C_n] + \\{L, C_n\\} + M,$$\n$$k_2 = \\frac{i}{\\hbar}[H, C_n + \\frac{1}{2}k_1 \\Delta t] + \\{L, C_n + \\frac{1}{2}k_1 \\Delta t\\} + M,$$\n$$k_3 = \\frac{i}{\\hbar}[H, C_n + \\frac{1}{2}k_2 \\Delta t] + \\{L, C_n + \\frac{1}{2}k_2 \\Delta t\\} + M,$$\n$$k_4 = \\frac{i}{\\hbar}[H, C_n + k_3 \\Delta t] + \\{L, C_n + k_3 \\Delta t\\} + M.$$\n\nThe RK4 method provides a robust way to integrate the Lindblad equation, ensuring stability and accuracy in capturing the system's evolution under dissipation and external fields.",
            "ground_truth_code": "def runge_kutta_dynamics(C0: np.ndarray, H: np.ndarray, L: np.ndarray, M: np.ndarray, t0: float, steps: int) -> np.ndarray:\n    \"\"\"\n    Simulates the evolution of the correlation matrix for a system of coupled nanospheres using the fourth-order Runge-Kutta (RK4) method.\n\n    Args:\n        C0 (np.ndarray): Initial correlation matrix (complex Hermitian).\n        H (np.ndarray): Hamiltonian matrix (real symmetric).\n        L (np.ndarray): Dissipation matrix (real diagonal).\n        M (np.ndarray): Reservoir matrix (real diagonal).\n        t0 (float): Initial simulation time (seconds).\n        steps (int): Number of RK4 time steps.\n\n    Returns:\n        np.ndarray: Diagonal elements of the final correlation matrix representing phonon occupations.\n    \"\"\"\n    delta_t = t0 / steps\n    C = np.array(C0, dtype=np.complex128)\n\n    def commutator(A, B) -> np.ndarray:\n        return np.dot(A, B) - np.dot(B, A)\n\n    def anticommutator(A, B) -> np.ndarray:\n        return np.dot(A, B) + np.dot(B, A)\n\n    for _ in range(steps):\n        k1 = 1j * commutator(H, C) + anticommutator(L, C) + M\n        k2 = 1j * commutator(H, C + 0.5 * k1 * delta_t) + anticommutator(L, C + 0.5 * k1 * delta_t) + M\n        k3 = 1j * commutator(H, C + 0.5 * k2 * delta_t) + anticommutator(L, C + 0.5 * k2 * delta_t) + M\n        k4 = 1j * commutator(H, C + k3 * delta_t) + anticommutator(L, C + k3 * delta_t) + M\n        C += (delta_t / 6) * (k1 + 2 * k2 + 2 * k3 + k4)\n    return np.diag(C).real",
            "function_header": "def runge_kutta_dynamics(C0: np.ndarray, H: np.ndarray, L: np.ndarray, M: np.ndarray, t0: float, steps: int) -> np.ndarray:\n    \"\"\"\n    Simulates the evolution of the correlation matrix for a system of coupled nanospheres using the fourth-order Runge-Kutta (RK4) method.\n\n    Args:\n        C0 (np.ndarray): Initial correlation matrix (complex Hermitian).\n        H (np.ndarray): Hamiltonian matrix (real symmetric).\n        L (np.ndarray): Dissipation matrix (real diagonal).\n        M (np.ndarray): Reservoir matrix (real diagonal).\n        t0 (float): Initial simulation time (seconds).\n        steps (int): Number of RK4 time steps.\n\n    Returns:\n        np.ndarray: Diagonal elements of the final correlation matrix representing phonon occupations.\n    \"\"\"",
            "test_cases": [
                "# 32.3 - Test case 1:  Large Reservoir matrix\nn0 = [39549953.17, 197.25, 197.25, 197.25, 197.25]\nP = [5, 5, 5, 5, 5]\nN = np.size(P)\ngamma = np.array([200] * N)\nC0 = np.diag(n0)\nH = [\n    [4.19771533e-29 - 4.38249711e-08j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -4.60061311e-41 + 0.00000000e+00j],\n    [-1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 5.82778871e-08j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j],\n    [-9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 3.49667323e-08j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j],\n    [-6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 6.99334645e-08j, -1.84713337e-40 + 0.00000000e+00j],\n    [-4.60061311e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-08j]\n]\n\nL = - gamma * np.identity(N) / 2\nM = 2372000 * gamma * np.identity(N) / 2\nt0 = 0.02\nsteps = 10000\ntarget = [1888660.31260604, 1164281.26503773, 1164281.26503773, 1164281.26503773, 1164281.26503773]\noutput = runge_kutta_dynamics(C0, H, L, M, t0, steps)\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Output {output} does not match target {target}\"",
                "# 32.3 - Test case 2: Smaller Reservoir Matrix\nn0 = [39549953.17, 197.25, 197.25, 197.25, 197.25]\nP = [5, 5, 5, 5, 5]\nN = np.size(P)\ngamma = np.array([200] * N)\nC0 = np.diag(n0)\nH = [\n    [4.19771533e-29 - 4.38249711e-08j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -4.60061311e-41 + 0.00000000e+00j],\n    [-1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 5.82778871e-08j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j],\n    [-9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 3.49667323e-08j, -1.84713337e-40 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j],\n    [-6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 6.99334645e-08j, -1.84713337e-40 + 0.00000000e+00j],\n    [-4.60061311e-41 + 0.00000000e+00j, -6.13534203e-41 + 0.00000000e+00j, -9.20811765e-41 + 0.00000000e+00j, -1.84713337e-40 + 0.00000000e+00j, 4.19771533e-29 - 4.66223097e-08j]\n]\n\nL = - gamma * np.identity(N) / 2\nM = 0.2372 * gamma * np.identity(N) / 2\nt0 = 0.02\nsteps = 10000\ntarget = [7.24382777e+05, 3.72918754e+00, 3.72918754e+00, 3.72918754e+00, 3.72918754e+00]\noutput = runge_kutta_dynamics(C0, H, L, M, t0, steps)\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Output {output} does not match target {target}\"",
                "# 32.3 - Test case 3: Small L\nn0 = [39549953.17, 197.25, 197.25, 197.25, 197.25]\nP = [5, 5, 5, 5, 5]\nN = np.size(P)\ngamma = np.array([200] * N)\nC0 = np.diag(n0)\nH = [\n    [1.89901202e+07, 1.97606991e-01, 4.94017479e-02, 2.19563323e-02, 1.23504368e-02],\n    [1.97606991e-01, 1.89901198e+07, 1.97606993e-01, 4.94017483e-02, 2.19563323e-02],\n    [4.94017479e-02, 1.97606993e-01, 1.89901198e+07, 1.97606993e-01, 4.94017479e-02],\n    [2.19563323e-02, 4.94017483e-02, 1.97606993e-01, 1.89901198e+07, 1.97606991e-01],\n    [1.23504368e-02, 2.19563323e-02, 4.94017479e-02, 1.97606991e-01, 1.89901202e+07],\n]\nL = - gamma * np.identity(N) / 2\nM = 197.25 * gamma * np.identity(N) / 2\nt0 = 0.05\nsteps = 5000\ntarget = [1893.99654171, 98.80474461, 98.6404378, 98.63164212, 98.63016249]\noutput = runge_kutta_dynamics(C0, H, L, M, t0, steps)\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Output {output} does not match target {target}\"",
                "# 32.3 - Test case 4: Larger L\nn0 = [39549953.17, 197.25, 197.25, 197.25, 197.25]\nP = [5, 5, 5, 5, 5]\nN = np.size(P)\ngamma = np.array([200] * N)\nC0 = np.diag(n0)\nH = [\n    [1.89901202e+07, 1.97606991e-01, 4.94017479e-02, 2.19563323e-02, 1.23504368e-02],\n    [1.97606991e-01, 1.89901198e+07, 1.97606993e-01, 4.94017483e-02, 2.19563323e-02],\n    [4.94017479e-02, 1.97606993e-01, 1.89901198e+07, 1.97606993e-01, 4.94017479e-02],\n    [2.19563323e-02, 4.94017483e-02, 1.97606993e-01, 1.89901198e+07, 1.97606991e-01],\n    [1.23504368e-02, 2.19563323e-02, 4.94017479e-02, 1.97606991e-01, 1.89901202e+07],\n]\nL = - 1000 * gamma * np.identity(N) / 2\nM = 197.25 * gamma * np.identity(N) / 2\nt0 = 0.05\nsteps = 5000\ntarget = [0.098625, 0.098625, 0.098625, 0.098625, 0.098625]\noutput = runge_kutta_dynamics(C0, H, L, M, t0, steps)\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Output {output} does not match target {target}\""
            ]
        }
    ],
    "general_solution": "def calculate_binding_force(P: list[float], phi: float, R: float, l: float, w: float, a: float, n: float) -> float:\n    \"\"\"\n    Function to calculate the optical binding force between two trapped nanospheres.\n\n    Args:\n        P (list of float): Laser powers for the two nanospheres (Watts).\n        phi (float): Polarization angle of the tweezers (radians).\n        R (float): Distance between adjacent nanospheres (meters).\n        l (float): Wavelength of the optical tweezers (meters).\n        w (float): Beam waist of the optical tweezers (meters).\n        a (float): Radius of the nanospheres (meters).\n        n (float): Refractive index of the nanospheres.\n\n    Returns:\n        float: Optical binding force (Pico-Newtons).\n    \"\"\"\n    k = 2 * np.pi / l  # Wave number\n    alpha = (4 * np.pi * epsilon_0 * a**3 * (n**2 - 1)) / (n**2 + 2)  # Polarizability\n    E1 = np.sqrt(4 * P[0] / (np.pi * w**2 * epsilon_0 * c))  # Electric field for sphere 1\n    E2 = np.sqrt(4 * P[1] / (np.pi * w**2 * epsilon_0 * c))  # Electric field for sphere 2\n\n    Fxx = (\n        2 * alpha**2 * E1 * E2 * np.cos(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n        * (-3 * np.cos(k * R) - 3 * k * R * np.sin(k * R) + (k * R)**2 * np.cos(k * R))\n    )\n    Fxy = (\n        alpha**2 * E1 * E2 * np.sin(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n        * (3 * np.cos(k * R) + 3 * k * R * np.sin(k * R) - 2 * (k * R)**2 * np.cos(k * R) - (k * R)**3 * np.sin(k * R))\n    )\n    return (Fxx + Fxy) * 1e12  # Convert to pico-Newtons\n\ndef generate_hamiltonian(k_ij: np.ndarray, P: list[float], w: float, a: float,\n                         n: float, N: int, rho: float, gamma: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Generate the Hamiltonian matrix for N nanospheres in an optical tweezer array.\n\n    Args:\n        k_ij (np.ndarray): Pairwise binding forces (pN/m)\n        P (list[float]): List of laser powers for each nanosphere (Watts)\n        w (float): Beam waist of optical tweezers (meters)\n        a (float): Radius of nanospheres (meters)\n        n (float): Refractive index of nanospheres\n        N (int): Number of nanospheres\n        rho (float): Density of nanospheres (kg/m\u00b3)\n        gamma (np.ndarray): Damping coefficients for each nanosphere (rad/s)\n\n    Returns:\n        np.ndarray: NxN Hamiltonian matrix\n    \"\"\"\n    k_ij = k_ij/1e12 # Convert to Newtons/m\n    m = (4 / 3) * np.pi * (a**3) * rho\n    alpha = 4 * np.pi * epsilon_0 * a**3 * ((n**2 - 1) / (n**2 + 2))\n    k_i = np.array([(alpha * p) / (np.pi * (w**4) * epsilon_0 * c) for p in P])\n    Omega_real = np.zeros(N, dtype=np.float64)\n    Omega_imag = np.zeros(N, dtype=np.float64)\n    g_ij = np.zeros((N, N), dtype=np.float64)\n    # Compute resonant frequencies\n    for i in range(N):\n        Omega_real[i] = np.sqrt((k_i[i] + np.sum(k_ij[i])) / m)\n        Omega_imag[i] = -gamma[i] / 2\n    # Compute coupling constants\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                g_ij[i, j] = -k_ij[i, j] / (2 * m * np.sqrt(Omega_real[i] * Omega_real[j]))\n    # Construct the Hamiltonian matrix\n    H = np.zeros((N, N), dtype=np.complex128)\n    for i in range(N):\n        H[i, i] = hbar * (Omega_real[i] + 1j * Omega_imag[i]) # Diagonal terms\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                H[i, j] = hbar * g_ij[i, j] # Off-diagonal terms\n    return H\n\ndef runge_kutta_dynamics(C0: np.ndarray, H: np.ndarray, L: np.ndarray, M: np.ndarray, t0: float, steps: int) -> np.ndarray:\n    \"\"\"\n    Simulates the evolution of the correlation matrix for a system of coupled nanospheres using the fourth-order Runge-Kutta (RK4) method.\n\n    Args:\n        C0 (np.ndarray): Initial correlation matrix (complex Hermitian).\n        H (np.ndarray): Hamiltonian matrix (real symmetric).\n        L (np.ndarray): Dissipation matrix (real diagonal).\n        M (np.ndarray): Reservoir matrix (real diagonal).\n        t0 (float): Initial simulation time (seconds).\n        steps (int): Number of RK4 time steps.\n\n    Returns:\n        np.ndarray: Diagonal elements of the final correlation matrix representing phonon occupations.\n    \"\"\"\n    delta_t = t0 / steps\n    C = np.array(C0, dtype=np.complex128)\n\n    def commutator(A, B) -> np.ndarray:\n        return np.dot(A, B) - np.dot(B, A)\n\n    def anticommutator(A, B) -> np.ndarray:\n        return np.dot(A, B) + np.dot(B, A)\n\n    for _ in range(steps):\n        k1 = 1j * commutator(H, C) + anticommutator(L, C) + M\n        k2 = 1j * commutator(H, C + 0.5 * k1 * delta_t) + anticommutator(L, C + 0.5 * k1 * delta_t) + M\n        k3 = 1j * commutator(H, C + 0.5 * k2 * delta_t) + anticommutator(L, C + 0.5 * k2 * delta_t) + M\n        k4 = 1j * commutator(H, C + k3 * delta_t) + anticommutator(L, C + k3 * delta_t) + M\n        C += (delta_t / 6) * (k1 + 2 * k2 + 2 * k3 + k4)\n    return np.diag(C).real\n\ndef solve_multiparticle_dynamics(n0: list[float], P: list[float], phi: float, R: float, l: float, w: float, a: float, n: float, h: float, N: int, rho: float, t0: float, steps: int, gamma: np.ndarray) -> list[float]:\n    \"\"\"\n    Simulates phonon occupation dynamics in an optical tweezer array.\n\n    Args:\n        n0 (list[float]): Initial phonon occupation numbers.\n        P (list[float]): Powers of optical tweezers (Watts).\n        phi (float): Polarization angle (radians).\n        R (float): Distance between adjacent nanospheres (meters).\n        l (float): Wavelength of optical tweezers (meters).\n        w (float): Beam waist of optical tweezers (meters).\n        a (float): Radius of nanospheres (meters).\n        n (float): Refractive index of the nanospheres.\n        h (float): Step size for numerical derivative (meters).\n        N (int): Number of nanospheres.\n        rho (float): Density of nanospheres (kg/m\u00b3).\n        t0 (float): Time for simulation (seconds).\n        steps (int): Number of RK4 time steps.\n        gamma (np.ndarray): Damping coefficients for each nanosphere (rad/s).\n\n    Returns:\n        list[float]: Phonon occupation numbers at time t0.\n    \"\"\"\n    k_ij = np.zeros((N, N))\n    for i in range(N):\n        for j in range(i + 1, N):\n            R_ij = abs(i - j) * R\n            F_plus = calculate_binding_force([P[i], P[j]], phi, R_ij + h, l, w, a, n)\n            F_minus = calculate_binding_force([P[i], P[j]], phi, R_ij - h, l, w, a, n)\n            k_ij[i, j] = k_ij[j, i] = (F_plus - F_minus) / (2 * h)\n\n    if gamma is None:\n        gamma = np.zeros(N)\n\n    H = generate_hamiltonian(k_ij, P, w, a, n, N, rho, gamma)\n\n    C0 = np.diag(n0)\n    L = - gamma * np.identity(N) / 2\n    M = 100 * gamma * np.identity(N) / 2\n    nf = runge_kutta_dynamics(C0, H, L, M, t0, steps)\n    return nf.tolist()",
    "general_tests": [
        "# Test Case 1: Standard Parameters with Uniform Damping\nn0 = [500, 400, 300, 200, 100]\nP = [0.01, 0.01, 0.01, 0.01, 0.01]\nphi = np.pi / 3\nR = 1.2e-6\nl = 1.5e-7\nw = 4e-7\na = 60e-9\nn = 1.55\nh = 1e-7\nN = len(P)\nrho = 2.5e3\nt0 = 2.0\nsteps = 500\ngamma = np.array([0.05] * N)\n\ntarget = [457.17683811618133, 366.69309631258534, 276.2093545089894, 185.72561270539404, 95.24187090179805]\noutput = solve_multiparticle_dynamics(n0, P, phi, R, l, w, a, n, h, N, rho, t0, steps, gamma)\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Output {output} does not match target {target}\"",
        "# Test Case 1: Standard Parameters with Uniform Damping\nn0 = [1000, 800, 600, 400, 200]\nP = [0.01, 0.01, 0.01, 0.01, 0.01]\nphi = np.pi / 4\nR = 1.5e-6\nl = 1.0e-7\nw = 3.5e-7\na = 60e-9\nn = 1.55\nh = 2e-6\nN = len(P)\nrho = 2.5e3\nt0 = 2.0\nsteps = 500\ngamma = np.array([0.05] * N)\n\ntarget = [909.5955471341624, 728.6280635269698, 547.6605799197774, 366.69309631258534, 185.72561270539404]\noutput = solve_multiparticle_dynamics(n0, P, phi, R, l, w, a, n, h, N, rho, t0, steps, gamma)\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Output {output} does not match target {target}\"",
        "# Test Case 2: Non-Uniform Damping with Increased Interaction Distance\nn0 = [1000, 800, 600, 400, 200]\nP = [5, 5, 5, 5, 5]\nphi = np.pi / 4\nR = 3e-6\nl = 1.0e-7\nw = 3.5e-7\na = 60e-9\nn = 1.55\nh = 2e-6\nN = len(P)\nrho = 2.0e3\nt0 = 1.5\nsteps = 500\ngamma = np.array([0.02, 0.025, 0.03, 0.035, 0.04])\n\ntarget = [971.9232568710825, 772.3958132906162, 575.7986150082041, 382.09901236953056, 191.2646800376374]\noutput = solve_multiparticle_dynamics(n0, P, phi, R, l, w, a, n, h, N, rho, t0, steps, gamma)\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Output {output} does not match target {target}\"",
        "# Test Case 3: High Laser Power and Low Damping\nn0 = [300, 250, 200, 150, 100]\nP = [100, 100, 100, 100, 100]\nphi = np.pi / 6\nR = 1.0e-6\nl = 2.0e-7\nw = 5e-7\na = 50e-9\nn = 1.8\nh = 1e-5\nN = len(P)\nrho = 1.5e3\nt0 = 3.0\nsteps = 1000\ngamma = np.array([0.01] * N)\n\ntarget = [292.61138338712686, 244.08910670970178, 195.5668300322761, 147.04455335485068, 98.52227667742534]\noutput = solve_multiparticle_dynamics(n0, P, phi, R, l, w, a, n, h, N, rho, t0, steps, gamma)\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Output {output} does not match target {target}\"",
        "# Test Case 4: Extreme Initial Phonon Occupations\nn0 = [1e7, 200.0, 200.0, 200.0, 200.0]\nP = [100, 100, 100, 100, 100]\nphi = np.pi / 2\nR = 0.99593306197 * 1550e-9\nl = 1550e-9\nw = 600e-9\na = 100e-9\nn = 1.444\nh = 2e-6\nN = np.size(P)\nrho = 2.648e3\nt0 = 0.02\nsteps = 10000\ngamma = np.array([0.001] * N)\n\ntarget = [9999800.002999986, 199.99700002999975, 199.99700002999975, 199.99700002999975, 199.99700002999975]\noutput = solve_multiparticle_dynamics(n0, P, phi, R, l, w, a, n, h, N, rho, t0, steps, gamma)\nassert np.allclose(output, target, rtol=1e-4, atol=1e-4), f\"Output {output} does not match target {target}\""
    ]
}